import discord
from discord import app_commands
from discord.ext import commands
import json
import os
import random
import asyncio
from datetime import datetime, timezone, timedelta
import base64
import requests


BASE_DIR = "/mnt/data"

start = datetime.now(timezone.utc)
end = start + timedelta(hours=5)

elapsed = end - start  # ‚è± timedelta object

SCORE_FILE = f"{BASE_DIR}/scores.json"
LOG_FILE = f"{BASE_DIR}/match_log.json"
LAST_FILE = f"{BASE_DIR}/last_match.json"
SHIELD_FILE = f"{BASE_DIR}/donate_shields.json"
DONATOR_FILE = f"{BASE_DIR}/donator.json"
SCORE_LOG_FILE = f"{BASE_DIR}/score_log.jsonl"

# üß† –¢–æ–≥–ª–æ–æ–º—ã–Ω Session-–Ω —Ç”©–ª”©–≤
GAME_SESSION = {
    "active": False,
    "start_time": None,
    "last_win_time": None
}

def load_donators():
    if not os.path.exists(DONATOR_FILE):
        return {}
    try:
        with open(DONATOR_FILE, "r") as f:
            return json.load(f)
    except json.JSONDecodeError:
        return {}  # ‚ö†Ô∏è —Ö–æ–æ—Å–æ–Ω —ç—Å–≤—ç–ª –±—É—Ä—É—É format-—Ç–∞–π —Ñ–∞–π–ª –±–∞–π–≤–∞–ª –∑“Ø–≥—ç—ç—Ä –ª —Ö–æ–æ—Å–æ–Ω dict –±—É—Ü–∞–∞–Ω–∞

def save_donators(data):
    with open(DONATOR_FILE, "w") as f:
        json.dump(data, f, indent=4)
    commit_to_github(DONATOR_FILE, "update donator.json")

def get_donator_emoji(data):
    from datetime import datetime, timezone, timedelta

    total = data.get("total_mnt", 0)
    last_donated = data.get("last_donated")

    if not last_donated:
        return None

    donated_time = datetime.fromisoformat(last_donated)
    now = datetime.now(timezone.utc)

    # –•—ç—Ä–≤—ç—ç 30 —Ö–æ–Ω–æ–≥ —Ö—ç—Ç—ç—Ä—Å—ç–Ω –±–æ–ª emoji –±–∞–π—Ö–≥“Ø–π
    if (now - donated_time).days > 30:
        return None

    if total >= 30000:
        return "üëë"
    elif total >= 10000:
        return "üí∏"
    else:
        return "üí∞"

def load_shields():
    if not os.path.exists(SHIELD_FILE):
        return {}
    with open(SHIELD_FILE, "r") as f:
        return json.load(f)

def save_shields(data):
    with open(SHIELD_FILE, "w") as f:
        json.dump(data, f, indent=4)
    commit_to_github(SHIELD_FILE, "update donate_shields.json")

def load_scores():
    if not os.path.exists(SCORE_FILE):
        return {}
    with open(SCORE_FILE, "r") as f:
        return json.load(f)

def save_scores(data):
    try:
        with open(SCORE_FILE, "w") as f:
            json.dump(data, f, indent=4)
        print("‚úÖ scores.json –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∞–¥–≥–∞–ª–∞–≥–¥–ª–∞–∞.")
        commit_to_github(SCORE_FILE, "update scores.json")
    except Exception as e:
        print("‚ùå scores.json —Ö–∞–¥–≥–∞–ª–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞:", e)

def log_score_transaction(uid: str, delta: int, total: int, tier: str, reason: str = ""):
    entry = {
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "uid": uid,
        "delta": delta,
        "total": total,
        "tier": tier,
        "reason": reason
    }
    print(f"[score_log] {entry}")
    with open(SCORE_LOG_FILE, "a") as f:
        f.write(json.dumps(entry) + "\n")
    commit_to_github(SCORE_LOG_FILE, "append score_log.jsonl")

# –ó”©–≤—Ö”©–Ω —ç–Ω—ç –¥–∞—Ä–∞–∞–ª–∞–ª –¥–∞–≥—É—É tier —Ö–∞—Ä—É—É–ª–Ω–∞ (”©–Ω–¥”©—Ä”©”©—Å –Ω–∞–º)
TIER_ORDER = ["2-1", "2-2", "2-3", "3-1", "3-2", "3-3", "4-1", "4-2", "4-3"]

# Tier –∞—Ö–∏—Ö, –±—É—É—Ä–∞—Ö —Ñ—É–Ω–∫—Ü

def promote_tier(current_tier):
    idx = TIER_ORDER.index(current_tier)
    return TIER_ORDER[max(0, idx - 1)]  # –∞—Ö–∏—Ö


def demote_tier(current_tier):
    idx = TIER_ORDER.index(current_tier)
    return TIER_ORDER[min(len(TIER_ORDER) - 1, idx + 1)]  # –±—É—É—Ä–∞—Ö


def get_tier(score):
    return "4-1"  # default tier

def commit_to_github(filename, message="update"):
    token = os.environ.get("GITHUB_TOKEN")
    repo = "Tuguldur0107/RZR_bot_v5"
    branch = "main"

    # ‚õîÔ∏è GitHub –¥—ç—ç—Ä path /mnt/data/... –±–∏—à, –∑”©–≤—Ö”©–Ω filename –±–∞–π—Ö —ë—Å—Ç–æ–π
    github_path = os.path.basename(filename)

    with open(filename, "rb") as f:
        content = base64.b64encode(f.read()).decode("utf-8")

    api_url = f"https://api.github.com/repos/{repo}/contents/{github_path}"

    res = requests.get(api_url, headers={"Authorization": f"token {token}"})
    sha = res.json().get("sha")

    data = {
        "message": message,
        "branch": branch,
        "content": content,
        "sha": sha
    }

    r = requests.put(api_url, headers={"Authorization": f"token {token}"}, json=data)
    if r.status_code in [200, 201]:
        print(f"‚úÖ {github_path} GitHub-–¥ —Ö–∞–¥–≥–∞–ª–∞–≥–¥–ª–∞–∞.")
    else:
        print(f"‚ùå GitHub commit –∞–ª–¥–∞–∞: {r.status_code}", r.text)


def clean_nickname(nick: str) -> str:
    for prefix in TIER_ORDER:
        if nick.startswith(f"{prefix} |"):
            nick = nick[len(prefix) + 2:].strip()
            break
    for emoji in ["üí∞", "üí∏", "üëë"]:
        if nick.startswith(f"{emoji} "):
            nick = nick[len(emoji) + 1:].strip()
            break
    return nick


def load_shields():
    if not os.path.exists(SHIELD_FILE):
        return {}
    with open(SHIELD_FILE, "r") as f:
        return json.load(f)

def save_shields(data):
    with open(SHIELD_FILE, "w") as f:
        json.dump(data, f, indent=4)

async def github_auto_commit():
    while True:
        await asyncio.sleep(3600)  # 60 –º–∏–Ω—É—Ç
        commit_to_github(SCORE_FILE, "auto: scores.json")
        commit_to_github(SCORE_LOG_FILE, "auto: score_log.jsonl")
        commit_to_github(LOG_FILE, "auto: match_log.json")
        commit_to_github(DONATOR_FILE, "auto: donator.json")
        commit_to_github(SHIELD_FILE, "auto: donate_shields.json")

async def update_nicknames_for_users(guild, user_ids: list):
    scores = load_scores()
    donors = load_donators()

    for user_id in user_ids:
        data = scores.get(str(user_id))
        if not data:
            continue

        member = guild.get_member(int(user_id))
        if member:
            tier = data.get("tier", get_tier())
            base_nick = clean_nickname(member.nick or member.name)

            # üíñ Donator emoji –æ—Ä—É—É–ª–Ω–∞
            emoji = get_donator_emoji(donors.get(str(user_id), {}))
            prefix = f"{emoji + ' ' if emoji else ''}{tier}"

            new_nick = f"{prefix} | {base_nick}"

            try:
                await member.edit(nick=new_nick)
            except discord.Forbidden:
                print(f"‚õîÔ∏è {member} nickname-–≥ ”©”©—Ä—á–∏–ª–∂ —á–∞–¥—Å–∞–Ω–≥“Ø–π (permission issue).")
            except Exception as e:
                print(f"‚ö†Ô∏è {member} nickname-–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {e}")


# ‚è±Ô∏è Session —Ö—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω —ç—Å—ç—Ö —à–∞–ª–≥–∞–≥—á task
async def session_timeout_checker():
    await bot.wait_until_ready()
    while not bot.is_closed():
        await asyncio.sleep(60)  # 1 –º–∏–Ω—É—Ç —Ç—É—Ç–∞–º–¥ —à–∞–ª–≥–∞–Ω–∞
        if GAME_SESSION["active"]:
            now = datetime.now(timezone.utc)
            elapsed = now - GAME_SESSION["last_win_time"]
            if elapsed.total_seconds() > 86400:  # 24 —Ü–∞–≥ = 86400 —Å–µ–∫—É–Ω–¥
                GAME_SESSION["active"] = False
                GAME_SESSION["start_time"] = None
                GAME_SESSION["last_win_time"] = None
                print("üîö Session –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä —Ö–∞–∞–≥–¥–ª–∞–∞ (24 —Ü–∞–≥ ”©–Ω–≥”©—Ä—Å”©–Ω).")

intents = discord.Intents.all()
bot = commands.Bot(command_prefix="/", intents=intents)


@bot.tree.command(name="ping", description="Ping test")
async def ping(interaction: discord.Interaction):
    await interaction.response.send_message("üèì Pong!")

@bot.tree.command(name="undo_last_match", description="–°“Ø“Ø–ª–¥ —Ö–∏–π—Å—ç–Ω match-–∏–π–Ω –æ–Ω–æ–æ–≥ –±—É—Ü–∞–∞–Ω–∞")
async def undo_last_match(interaction: discord.Interaction):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        print("‚ùå Interaction already responded or expired.")
        return

    try:
        with open(LAST_FILE, "r") as f:
            last = json.load(f)
    except FileNotFoundError:
        await interaction.followup.send("‚ö†Ô∏è –°“Ø“Ø–ª–¥ –±“Ø—Ä—Ç–≥—ç—Å—ç–Ω match –æ–ª–¥—Å–æ–Ω–≥“Ø–π.")
        return

    scores = load_scores()
    changed_ids = []
    guild = interaction.guild

    for uid in last.get("winners", []):
        uid_str = str(uid)
        data = scores.get(uid_str)
        member = guild.get_member(int(uid))

        if data:
            score = data.get("score", 0) - 1
            if score < 0:
                score = 0

            tier = data.get("tier", 4-1)

            scores[uid_str] = {
                "username": data.get("username") or (member.name if member else "unknown"),
                "score": score,
                "tier": tier,
                "updated_at": datetime.now(timezone.utc).isoformat()
            }

            log_score_transaction(uid_str, -1, score, tier, "undo win")
            changed_ids.append(int(uid))

    for uid in last.get("losers", []):
        uid_str = str(uid)
        data = scores.get(uid_str)
        member = guild.get_member(int(uid))

        if data:
            score = data.get("score", 0) + 1
            if score > 5:
                score = 5

            tier = data.get("tier", 4-1)

            scores[uid_str] = {
                "username": data.get("username") or (member.name if member else "unknown"),
                "score": score,
                "tier": tier,
                "updated_at": datetime.now(timezone.utc).isoformat()
            }

            log_score_transaction(uid_str, +1, score, tier, "undo loss")
            changed_ids.append(int(uid))

    save_scores(scores)
    await update_nicknames_for_users(interaction.guild, changed_ids)
    commit_to_github(LAST_FILE, "update last_match.json")
    await interaction.followup.send("‚Ü©Ô∏è –°“Ø“Ø–ª–∏–π–Ω match-–∏–π–Ω –æ–Ω–æ–æ –±—É—Ü–∞–∞–≥–¥–ª–∞–∞.")

@bot.tree.command(name="match_history", description="–°“Ø“Ø–ª–∏–π–Ω —Ç–æ–≥–ª–æ–ª—Ç—É—É–¥—ã–Ω –∂–∞–≥—Å–∞–∞–ª—Ç—ã–≥ —Ö–∞—Ä—É—É–ª–Ω–∞")
async def match_history(interaction: discord.Interaction):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        print("‚ùå Interaction already responded or expired.")
        return

    try:
        with open(LOG_FILE, "r") as f:
            log = json.load(f)
    except FileNotFoundError:
        await interaction.followup.send("üì≠ Match log —Ö–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞.")
        return

    if not log:
        await interaction.followup.send("üì≠ Match log —Ö–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞.")
        return

    # üïì Timestamp-–æ–æ—Ä —ç—Ä—ç–º–±—ç–ª—ç—ç–¥ —Å“Ø“Ø–ª–∏–π–Ω 5-–≥ –∞–≤–Ω–∞
    log = sorted(log, key=lambda x: x.get("timestamp", ""), reverse=True)[:5]

    msg = "üìú **–°“Ø“Ø–ª–∏–π–Ω Match-—É—É–¥:**\n"

    for i, entry in enumerate(log, 1):
        ts = entry.get("timestamp", "‚è±")
        dt = datetime.fromisoformat(ts).astimezone(timezone(timedelta(hours=8)))
        ts_str = dt.strftime("%Y-%m-%d %H:%M")

        mode = entry.get("mode", "unknown")
        winner = entry.get("winner_team")
        loser = entry.get("loser_team")
        changed = entry.get("changed_players", [])
        teams = entry.get("teams", [])

        msg += f"\n**#{i} | {mode} | {ts_str}**\n"

        for t_num, team in enumerate(teams, start=1):
            tag = "üèÜ" if t_num == winner else "üíî" if t_num == loser else "üéÆ"
            players = ", ".join(f"<@{uid}>" for uid in team)
            msg += f"{tag} Team {t_num}: {players}\n"

        for ch in changed:
            msg += f"üîÅ <@{ch['from']}> ‚Üí <@{ch['to']}>\n"

    await interaction.followup.send(msg)

@bot.tree.command(name="my_score", description="–¢–∞–Ω—ã –æ–Ω–æ–æ–≥ —à–∞–ª–≥–∞—Ö")
async def my_score(interaction: discord.Interaction):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        print("‚ùå Interaction already responded or expired.")
        return

    print("üî• /my_score —ç—Ö—ç–ª–ª—ç—ç")

    scores = load_scores()
    user_id = str(interaction.user.id)
    data = scores.get(user_id)

    if isinstance(data, dict):
        score = data.get("score", 0)
        tier = data.get("tier", 4-1)
        updated = data.get("updated_at")

        msg = f"üìø {interaction.user.mention} —Ç–∞–Ω—ã –æ–Ω–æ–æ: {score}\nüéñ –¢“Ø–≤—à–∏–Ω: **{tier}**"
        if updated:
            try:
                dt = datetime.fromisoformat(updated)
                formatted = dt.strftime("%Y-%m-%d %H:%M")
                msg += f"\nüïì –°“Ø“Ø–ª–¥ —à–∏–Ω—ç—á–ª—ç–≥–¥—Å—ç–Ω: `{formatted}`"
            except:
                msg += f"\nüïì –°“Ø“Ø–ª–¥ —à–∏–Ω—ç—á–ª—ç–≥–¥—Å—ç–Ω: `{updated}`"

        await interaction.followup.send(content=msg)
    else:
        await interaction.followup.send(
            content=f"üìø {interaction.user.mention} —Ç–∞–Ω–¥ –æ–Ω–æ–æ –±“Ø—Ä—Ç–≥—ç–≥–¥—ç—ç–≥“Ø–π –±–∞–π–Ω–∞.\nüéñ –¢“Ø–≤—à–∏–Ω: **Tier-–≥“Ø–π –±–∞–π–Ω–∞**"
        )

@bot.tree.command(name="scoreboard", description="–ë“Ø—Ö —Ç–æ–≥–ª–æ–≥—á–¥—ã–Ω –æ–Ω–æ–æ–Ω—ã –∂–∞–≥—Å–∞–∞–ª—Ç")
async def scoreboard(interaction: discord.Interaction):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        print("‚ùå Interaction already responded.")
        return

    # ‚úÖ –ê–¥–º–∏–Ω —ç—Ä—Ö —à–∞–ª–≥–∞—Ö
    if not interaction.user.guild_permissions.administrator:
        await interaction.followup.send("‚ùå –≠–Ω—ç –∫–æ–º–∞–Ω–¥—ã–≥ –∑”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á –∞–∂–∏–ª–ª—É—É–ª–∂ —á–∞–¥–Ω–∞.", ephemeral=True)
        return

    scores = load_scores()

    # üïì –°“Ø“Ø–ª–¥ —à–∏–Ω—ç—á–ª—ç–≥–¥—Å—ç–Ω –æ–≥–Ω–æ–æ
    latest_update = None
    for data in scores.values():
        if isinstance(data, dict) and "updated_at" in data:
            try:
                t = datetime.fromisoformat(data["updated_at"])
                if not latest_update or t > latest_update:
                    latest_update = t
            except:
                pass

    sorted_scores = sorted(scores.items(),
                           key=lambda x: x[1].get("score", 0)
                           if isinstance(x[1], dict) else 0,
                           reverse=True)

    lines = []
    for user_id, data in sorted_scores:
        if not isinstance(data, dict):
            continue
        member = interaction.guild.get_member(int(user_id))
        if member:
            score = data.get("score", 0)
            tier = data.get("tier", "3-3")

            updated = data.get("updated_at")
            update_str = ""
            if updated:
                try:
                    ts = datetime.fromisoformat(updated).strftime("%Y-%m-%d %H:%M")
                    update_str = f" (üïì {ts})"
                except:
                    pass

            lines.append(f"–û–Ω–æ–æ: {score}, –¢“Ø–≤—à–∏–Ω: {tier} ‚Äî {member.display_name}{update_str}")

    if not lines:
        await interaction.followup.send("üìä –û–Ω–æ–æ –±“Ø—Ä—Ç–≥—ç–ª–≥“Ø–π –±–∞–π–Ω–∞.")
        return

    chunk = "üìä **Scoreboard:**\n"
    if latest_update:
        chunk += f"üïì –°“Ø“Ø–ª–¥ —à–∏–Ω—ç—á–ª—ç–≥–¥—Å—ç–Ω: `{latest_update.strftime('%Y-%m-%d %H:%M:%S')}`\n\n"

    for line in lines:
        if len(chunk) + len(line) + 1 > 1900:
            await interaction.followup.send(chunk)
            chunk = ""
        chunk += line + "\n"

    if chunk:
        await interaction.followup.send(chunk)

@bot.tree.command(name="user_tier", description="–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —Ç“Ø–≤—à–∏–Ω–≥ —Ö–∞—Ä—É—É–ª–Ω–∞")
@app_commands.describe(member="–¢“Ø–≤—à–∏–Ω —à–∞–ª–≥–∞—Ö —Ö—ç—Ä—ç–≥–ª—ç–≥—á")
async def user_tier(interaction: discord.Interaction, member: discord.Member):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        print("‚ùå Interaction already responded or expired.")
        return

    scores = load_scores()
    user_id = str(member.id)
    data = scores.get(user_id)

    if isinstance(data, dict):
        tier = data.get("tier", 4-1)
        await interaction.followup.send(
            f"üéñ {member.mention} —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —Ç“Ø–≤—à–∏–Ω: **{tier}**"
        )
    else:
        await interaction.followup.send(
            f"‚ö†Ô∏è {member.mention} —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥ –æ–Ω–æ–æ/—Ç”©–≤—à–∏–Ω –±“Ø—Ä—Ç–≥—ç–≥–¥—ç—ç–≥“Ø–π –±–∞–π–Ω–∞."
        )

@bot.tree.command(name="make_team", description="–¢–æ–≥–ª–æ—Ö –±–∞–≥–∏–π–Ω —Ç–æ—Ö–∏—Ä–≥–æ–æ–≥ —ç—Ö–ª“Ø“Ø–ª–Ω—ç")
@app_commands.describe(team_count="–•—ç–¥—ç–Ω –±–∞–≥—Ç–∞–π –±–∞–π—Ö –≤—ç", players_per_team="–ù—ç–≥ –±–∞–≥—Ç —Ö—ç–¥—ç–Ω —Ö“Ø–Ω –±–∞–π—Ö –≤—ç")
async def make_team(interaction: discord.Interaction, team_count: int, players_per_team: int):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        print("‚ùå Interaction expired.")
        return
       
    # üîÑ –•—É—É—á–∏–Ω session-–∏–π–≥ –¥—É—É—Å–≥–∞–∂, —à–∏–Ω—ç —Ç–æ—Ö–∏—Ä–≥–æ–æ —ç—Ö–ª“Ø“Ø–ª–Ω—ç
    GAME_SESSION["active"] = False
    GAME_SESSION["start_time"] = None
    GAME_SESSION["last_win_time"] = None

    TEAM_SETUP["initiator_id"] = interaction.user.id
    TEAM_SETUP["team_count"] = team_count
    TEAM_SETUP["players_per_team"] = players_per_team
    TEAM_SETUP["player_ids"] = []
    TEAM_SETUP["teams"] = []
    TEAM_SETUP["changed_players"] = []

    await interaction.followup.send(
        f"üéØ –ë–∞–≥–∏–π–Ω —Ç–æ—Ö–∏—Ä–≥–æ–æ —ç—Ö—ç–ª–ª—ç—ç! –ù–∏–π—Ç {team_count} –±–∞–≥, –Ω—ç–≥ –±–∞–≥—Ç {players_per_team} —Ö“Ø–Ω –±–∞–π–Ω–∞. "
        f"–¢–æ–≥–ª–æ–≥—á–∏–¥ /addme –≥—ç–∂ –±“Ø—Ä—Ç–≥“Ø“Ø–ª–Ω—ç “Ø“Ø.\n"
        f"‚è≥ **5 –º–∏–Ω—É—Ç—ã–Ω –¥–∞—Ä–∞–∞ –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä –±–∞–≥ —Ö—É–≤–∞–∞—Ä–∏–ª–Ω–∞.**")

    async def auto_assign():
        await asyncio.sleep(300)
        fake = type("FakeInteraction", (), {})()
        fake.user = interaction.user
        fake.guild = interaction.guild
        fake.channel = interaction.channel
        fake.response = interaction.response
        fake.followup = interaction.followup
        await make_team_go(fake)

    asyncio.create_task(auto_assign())

@bot.tree.command(name="addme", description="–¢–æ–≥–ª–æ–≥—á–æ–æ—Ä –±“Ø—Ä—Ç–≥“Ø“Ø–ª–Ω—ç")
async def addme(interaction: discord.Interaction):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        print("‚ùå Interaction expired.")
        return
    
    if TEAM_SETUP["initiator_id"] is None:
        await interaction.followup.send("‚ö†Ô∏è /make_team –∫–æ–º–∞–Ω–¥–∞–∞—Ä —ç—Ö–ª“Ø“Ø–ª—Å–Ω–∏–π –¥–∞—Ä–∞–∞ /addme –∞—à–∏–≥–ª–∞–Ω–∞ —É—É.")
        return

    if GAME_SESSION["active"]:
        await interaction.followup.send("‚ö†Ô∏è Session –∞–ª—å —Ö—ç–¥–∏–π–Ω —ç—Ö—ç–ª—Å—ç–Ω –±–∞–π–Ω–∞, –¥–∞—Ö–∏–Ω –±“Ø—Ä—Ç–≥“Ø“Ø–ª—ç—Ö –±–æ–ª–æ–º–∂–≥“Ø–π.", ephemeral=True)
        return

    user_id = interaction.user.id
    if user_id not in TEAM_SETUP["player_ids"]:
        TEAM_SETUP["player_ids"].append(user_id)
        all_players = ", ".join([f"<@{uid}>" for uid in TEAM_SETUP["player_ids"]])
        await interaction.followup.send(
            f"‚úÖ {interaction.user.mention} –∞–º–∂–∏–ª—Ç—Ç–∞–π –±“Ø—Ä—Ç–≥—ç–≥–¥–ª—ç—ç!\n"
            f"üìã –ë“Ø—Ä—Ç–≥—ç–≥–¥—Å—ç–Ω —Ç–æ–≥–ª–æ–≥—á–∏–¥: {all_players}"
        )
    else:
        await interaction.followup.send("‚ö†Ô∏è –¢–∞ –∞–ª—å —Ö—ç–¥–∏–π–Ω –±“Ø—Ä—Ç–≥—ç–≥–¥—Å—ç–Ω –±–∞–π–Ω–∞.", ephemeral=True)
@bot.tree.command(name="make_team_go", description="–ë“Ø—Ä—Ç–≥“Ø“Ø–ª—Å—ç–Ω —Ç–æ–≥–ª–æ–≥—á–¥—ã–≥ –±–∞–≥—Ç —Ö—É–≤–∞–∞–Ω–∞")
async def make_team_go(interaction: discord.Interaction):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        print("‚ùå Interaction expired.")
        return
     
    if interaction.user.id != TEAM_SETUP["initiator_id"]:
        await interaction.followup.send("‚ùå –ó”©–≤—Ö”©–Ω —Ç–æ—Ö–∏—Ä–≥–æ–æ–≥ —ç—Ö–ª“Ø“Ø–ª—Å—ç–Ω —Ö“Ø–Ω –±–∞–≥ —Ö—É–≤–∞–∞—Ä–∏–ª–∞–ª—Ç—ã–≥ —ç—Ö–ª“Ø“Ø–ª–∂ –±–æ–ª–Ω–æ.")
        return

    team_count = TEAM_SETUP["team_count"]
    players_per_team = TEAM_SETUP["players_per_team"]
    user_ids = TEAM_SETUP["player_ids"]
    total_slots = team_count * players_per_team

    guild = interaction.guild
    scores = load_scores()

    tier_score = {
        "4-3": 0,
        "4-2": 5,
        "4-1": 10,
        "3-3": 15,
        "3-2": 20,
        "3-1": 25,
        "2-3": 30,
        "2-2": 35,
        "2-1": 40
    }

    player_info = []
    for uid in user_ids:
        member = guild.get_member(uid)
        if not member:
            continue
        data = scores.get(str(uid), {"tier": "4-1", "score": 0})
        tier = data.get("tier", 4-1)
        score = data.get("score", 0)
        base = tier_score.get(tier, 5)
        real_score = base + score
        player_info.append({
            "member": member,
            "tier": tier,
            "score": score,
            "real_score": real_score
        })

    teams = [{"players": [], "score": 0} for _ in range(team_count)]
    player_info.sort(key=lambda x: -x["real_score"])

    for player in player_info:
        valid_teams = [t for t in teams if len(t["players"]) < players_per_team]
        if not valid_teams:
            break
        target_team = min(valid_teams, key=lambda t: t["score"])
        target_team["players"].append(player)
        target_team["score"] += player["real_score"]

    assigned_players = [p for t in teams for p in t["players"]]
    unassigned_players = [p for p in player_info if p not in assigned_players]

    emojis = ["ü•á", "ü•à", "ü•â", "üéØ", "üî•", "‚ö°Ô∏è", "üõ°", "üéÆ", "üëæ", "üé≤"]
    msg = f"**ü§ñ {len(player_info)} —Ç–æ–≥–ª–æ–≥—á–∏–π–≥ {team_count} –±–∞–≥—Ç —Ö—É–≤–∞–∞–ª–∞–∞ (–Ω—ç–≥ –±–∞–≥—Ç {players_per_team} —Ö“Ø–Ω):**\n\n"

    team_ids = []
    for i, team in enumerate(teams, 1):
        emj = emojis[i - 1] if i - 1 < len(emojis) else "üèÖ"
        msg += f"**{emj} Team {i}** (–Ω–∏–π—Ç –æ–Ω–æ–æ: `{team['score']}`):\n"
        team_ids.append([p["member"].id for p in team["players"]])
        for p in team["players"]:
            msg += f"‚Ä¢ {p['member'].mention} ({p['tier']} / {p['score']:+})\n"
        msg += "\n"

    if unassigned_players:
        msg += "‚ö†Ô∏è **–î–∞—Ä–∞–∞—Ö —Ç–æ–≥–ª–æ–≥—á–∏–¥ —ç–Ω—ç —É–¥–∞–∞–¥ –±–∞–≥—Ç –±–∞–≥—Ç–∞–∂ —á–∞–¥—Å–∞–Ω–≥“Ø–π:**\n"
        for p in unassigned_players:
            msg += f"‚Ä¢ {p['member'].mention} ({p['tier']} / {p['score']:+})\n"

    await interaction.followup.send(msg)

    TEAM_SETUP["player_ids"] = [p["member"].id for t in teams for p in t["players"]]
    TEAM_SETUP["teams"] = team_ids

    now = datetime.now(timezone.utc)
    GAME_SESSION["active"] = True
    GAME_SESSION["start_time"] = now
    GAME_SESSION["last_win_time"] = now

    team_log_entry = {
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "mode": "make_team_go",
        "teams": TEAM_SETUP["teams"],
        "initiator": interaction.user.id
    }

    try:
        with open("team_log.json", "r") as f:
            team_log = json.load(f)
    except FileNotFoundError:
        team_log = []

    team_log.append(team_log_entry)
    with open("team_log.json", "w") as f:
        json.dump(team_log, f, indent=2)

# üèÜ Winner Team —Å–æ–Ω–≥–æ—Ö
@bot.tree.command(name="set_winner_team", description="–•–æ–∂—Å–æ–Ω –±–æ–ª–æ–Ω —Ö–æ–∂–∏–≥–¥—Å–æ–Ω –±–∞–≥–∏–π–≥ –∑–∞–∞–∂ –æ–Ω–æ–æ ”©–≥–Ω”©")
@app_commands.describe(winning_team="–•–æ–∂—Å–æ–Ω –±–∞–≥–∏–π–Ω –¥—É–≥–∞–∞—Ä", losing_team="–•–æ–∂–∏–≥–¥—Å–æ–Ω –±–∞–≥–∏–π–Ω –¥—É–≥–∞–∞—Ä")
async def set_winner_team(interaction: discord.Interaction, winning_team: int, losing_team: int):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        print("‚ùå Interaction expired.")
        return
        
    if interaction.user.id != TEAM_SETUP.get("initiator_id"):
        await interaction.followup.send("‚ùå –ó”©–≤—Ö”©–Ω —Ç–æ—Ö–∏—Ä–≥–æ–æ–≥ —ç—Ö–ª“Ø“Ø–ª—Å—ç–Ω —Ö“Ø–Ω –∞–∂–∏–ª–ª—É—É–ª–Ω–∞.", ephemeral=True)
        return

    if not GAME_SESSION["active"]:
        await interaction.followup.send("‚ö†Ô∏è Session –∏–¥—ç–≤—Ö–≥“Ø–π –±–∞–π–Ω–∞. /make_team_go-–æ–æ—Ä —ç—Ö–ª“Ø“Ø–ª.", ephemeral=True)
        return

    team_count = TEAM_SETUP["team_count"]
    team_size = TEAM_SETUP["players_per_team"]

    if not (1 <= winning_team <= team_count) or not (1 <= losing_team <= team_count):
        await interaction.followup.send("‚ùå –ë–∞–≥–∏–π–Ω –¥—É–≥–∞–∞—Ä –±—É—Ä—É—É –±–∞–π–Ω–∞.")
        return
    if winning_team == losing_team:
        await interaction.followup.send("‚ö†Ô∏è –•–æ–∂—Å–æ–Ω –±–∞ —Ö–æ–∂–∏–≥–¥—Å–æ–Ω –±–∞–≥ –∞–¥–∏–ª –±–∞–π–Ω–∞.")
        return

    def get_team_user_ids(team_number):
        start = (team_number - 1) * team_size
        end = start + team_size
        return TEAM_SETUP["player_ids"][start:end]

    scores = load_scores()
    shields = load_shields()
    guild = interaction.guild
    changed_ids = []

    winning_ids = get_team_user_ids(winning_team)
    losing_ids = get_team_user_ids(losing_team)

    winners, losers = [], []

    for uid in winning_ids:
        uid_str = str(uid)
        member = guild.get_member(uid)
        data = scores.get(uid_str, {})
        score = data.get("score", 0) + 1
        tier = data.get("tier", 4-1)

        while score >= 5:
            tier = promote_tier(tier)
            score -= 5

        scores[uid_str] = {
            "username": member.name if member else "unknown",
            "score": score,
            "tier": tier,
            "updated_at": datetime.now(timezone.utc).isoformat()
        }
        log_score_transaction(uid_str, +1, score, tier, "win")

        changed_ids.append(uid)
        if member:
            winners.append(member.mention)

    for uid in losing_ids:
        uid_str = str(uid)
        member = guild.get_member(uid)
        data = scores.get(uid_str, {})
        score = data.get("score", 0)
        tier = data.get("tier", 4-1)

        if await should_deduct(uid_str, shields):
            score -= 1
            while score <= -5:
                tier = demote_tier(tier)
                score += 5

        scores[uid_str] = {
            "username": member.name if member else "unknown",
            "score": score,
            "tier": tier,
            "updated_at": datetime.now(timezone.utc).isoformat()
        }
        log_score_transaction(uid_str, -1, score, tier, "loss")

        changed_ids.append(uid)
        if member:
            losers.append(member.mention)

    save_scores(scores)
    save_shields(shields)
    await update_nicknames_for_users(guild, changed_ids)

    # üóÉÔ∏è Match log —Ö–∞–¥–≥–∞–ª–∞—Ö
    log_entry = {
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "mode": "set_winner_team",
        "teams": TEAM_SETUP.get("teams", []),
        "winner_team": winning_team,
        "loser_team": losing_team,
        "changed_players": TEAM_SETUP.get("changed_players", []),
        "initiator": interaction.user.id
    }

    try:
        with open(LOG_FILE, "r") as f:
            log = json.load(f)
    except FileNotFoundError:
        log = []

    log.append(log_entry)
    with open(LOG_FILE, "w") as f:
        json.dump(log, f, indent=2)
    commit_to_github(LOG_FILE, "update match_log.json")

    last_entry = {
        "timestamp": log_entry["timestamp"],
        "mode": log_entry["mode"],
        "winners": winning_ids,
        "losers": losing_ids
    }
    with open(LAST_FILE, "w") as f:
        json.dump(last_entry, f, indent=2)
    commit_to_github(LAST_FILE, "update last_match.json")

    await interaction.followup.send(f"üèÜ Team {winning_team} –æ–Ω–æ–æ –∞–≤–ª–∞–∞: ‚úÖ +1\n{', '.join(winners)}")
    await interaction.followup.send(f"üíî Team {losing_team} –æ–Ω–æ–æ —Ö–∞—Å–∞–≥–¥–ª–∞–∞: ‚ùå -1\n{', '.join(losers)}")

    GAME_SESSION["last_win_time"] = datetime.now(timezone.utc)

@bot.tree.command(name="change_player", description="–ë–∞–≥—Ç —Ç–æ–≥–ª–æ–≥—á —Å–æ–ª–∏—Ö")
@app_commands.describe(from_member="–°–æ–ª–∏–≥–¥–æ—Ö —Ç–æ–≥–ª–æ–≥—á", to_member="–®–∏–Ω—ç —Ç–æ–≥–ª–æ–≥—á")
async def change_player(interaction: discord.Interaction, from_member: discord.Member, to_member: discord.Member):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        print("‚ùå Interaction expired.")
        return
        
    # –ó”©–≤—Ö”©–Ω —ç—Ö–ª“Ø“Ø–ª—ç–≥—á –∞–∂–∏–ª–ª—É—É–ª–∞—Ö —ç—Ä—Ö—Ç—ç–π —ç—Å—ç—Ö —à–∞–ª–≥–∞—Ö
    if interaction.user.id != TEAM_SETUP.get("initiator_id"):
        await interaction.followup.send("‚ùå –ó”©–≤—Ö”©–Ω –±–∞–≥–∏–π–Ω —Ç–æ—Ö–∏—Ä–≥–æ–æ–≥ —ç—Ö–ª“Ø“Ø–ª—Å—ç–Ω —Ö“Ø–Ω —ç–Ω—ç –∫–æ–º–∞–Ω–¥—ã–≥ –∞–∂–∏–ª–ª—É—É–ª–∂ —á–∞–¥–Ω–∞.", ephemeral=True)
        return

    user_ids = TEAM_SETUP["player_ids"]
    players_per_team = TEAM_SETUP["players_per_team"]
    team_count = TEAM_SETUP["team_count"]

    if from_member.id not in user_ids:
        await interaction.followup.send(f"‚ö†Ô∏è {from_member.mention} –±–∞–≥—Ç –±“Ø—Ä—Ç–≥—ç–≥–¥—ç—ç–≥“Ø–π –±–∞–π–Ω–∞.")
        return

    if to_member.id in user_ids:
        await interaction.followup.send(f"‚ö†Ô∏è {to_member.mention} –∞–ª—å —Ö—ç–¥–∏–π–Ω ”©”©—Ä –±–∞–≥—Ç –±“Ø—Ä—Ç–≥—ç–≥–¥—Å—ç–Ω –±–∞–π–Ω–∞.")
        return

    idx = user_ids.index(from_member.id)
    TEAM_SETUP["player_ids"][idx] = to_member.id

    # üóÉÔ∏è –°–æ–ª–∏–ª—Ü–æ–æ–Ω—ã log team_log.json —Ä—É—É —Ö–∞–¥–≥–∞–ª–∞—Ö
    team_log_entry = {
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "mode": "change_player",
        "teams": TEAM_SETUP.get("teams", []),
        "changed_players": [{"from": from_member.id, "to": to_member.id}],
        "initiator": interaction.user.id
    }

    try:
        with open("team_log.json", "r") as f:
            team_log = json.load(f)
    except FileNotFoundError:
        team_log = []

    team_log.append(team_log_entry)
    with open("team_log.json", "w") as f:
        json.dump(team_log, f, indent=2)

    old_team = (idx // players_per_team) + 1  # –ë–∞–≥–∏–π–Ω –¥—É–≥–∞–∞—Ä (1-—Å —ç—Ö—ç–ª–Ω—ç)

    await interaction.followup.send(
        f"üîÅ {from_member.mention} ‚Üí {to_member.mention} —Å–æ–ª–∏–≥–¥–ª–æ–æ!\n"
        f"üìå {from_member.mention} –Ω—å Team {old_team}-–¥ –±–∞–π—Å–∞–Ω."
    )

@bot.tree.command(name="donate_shield", description="–¢–æ–≥–ª–æ–≥—á–∏–¥ —Ö–∞–º–≥–∞–∞–ª–∞–ª—Ç—ã–Ω —É–¥–∞–∞ –æ–Ω–æ–æ–Ω–æ")
@app_commands.describe(
    member="–•–∞–º–≥–∞–∞–ª–∞–ª—Ç –∞–≤–∞—Ö —Ç–æ–≥–ª–æ–≥—á",
    count="–•—ç–¥—ç–Ω —É–¥–∞–∞ —Ö–∞–º–≥–∞–∞–ª–∞—Ö –≤—ç (default: 1)"
)
async def donate_shield(interaction: discord.Interaction, member: discord.Member, count: int = 1):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        print("‚ùå Interaction expired.")
        return

    # ‚úÖ –ó”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á —à–∞–ª–≥–∞—Ö
    if not interaction.user.guild_permissions.administrator:
        await interaction.followup.send(
            "‚ùå –≠–Ω—ç –∫–æ–º–∞–Ω–¥—ã–≥ –∑”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á –∞–∂–∏–ª–ª—É—É–ª–∂ —á–∞–¥–Ω–∞.",
            ephemeral=True
        )
        return

    if count <= 0:
        await interaction.followup.send("‚ö†Ô∏è –•–∞–º–≥–∞–∞–ª–∞–ª—Ç—ã–Ω —Ç–æ–æ 1-—Å –¥—ç—ç—à –±–∞–π—Ö —ë—Å—Ç–æ–π.")
        return

    shields = load_shields()
    uid = str(member.id)
    shields[uid] = shields.get(uid, 0) + count
    save_shields(shields)

    await interaction.followup.send(
        f"üõ°Ô∏è {member.mention} —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥ {count} —É–¥–∞–∞–≥–∏–π–Ω —Ö–∞–º–≥–∞–∞–ª–∞–ª—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π ”©–≥–ª”©”©!"
    )

@bot.tree.command(name="init_scores",
                  description="–ë“Ø—Ö –≥–∏—à“Ø“Ø–¥—ç–¥ default –æ–Ω–æ–æ, tier (4-1) –æ–Ω–æ–æ–Ω–æ")
async def init_scores(interaction: discord.Interaction):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        print("‚ùå Interaction expired.")
        return

    # ‚úÖ –∑”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á –∞–∂–∏–ª–ª—É—É–ª–Ω–∞
    if not interaction.user.guild_permissions.administrator:
        await interaction.followup.send(
            "‚ùå –≠–Ω—ç –∫–æ–º–∞–Ω–¥—ã–≥ –∑”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á –∞–∂–∏–ª–ª—É—É–ª–∂ —á–∞–¥–Ω–∞.",
            ephemeral=True
        )
        return

    guild = interaction.guild
    scores = load_scores()

    default_tier = "4-1"
    for member in guild.members:
        if member.bot:
            continue
        uid = str(member.id)
        if uid not in scores:
            scores[uid] = {"score": 0, "tier": default_tier}
            try:
                base_nick = member.nick or member.name
                for prefix in TIER_ORDER:
                    if base_nick.startswith(f"{prefix} |"):
                        base_nick = base_nick[len(prefix) + 2:].strip()
                new_nick = f"{default_tier} | {base_nick}"
                await member.edit(nick=new_nick)
            except discord.Forbidden:
                print(f"‚õîÔ∏è {member} nickname-–≥ ”©”©—Ä—á–∏–ª–∂ —á–∞–¥—Å–∞–Ω–≥“Ø–π.")
            except Exception as e:
                print(f"‚ö†Ô∏è {member} nickname-–¥ –∞–ª–¥–∞–∞: {e}")

    save_scores(scores)
    await interaction.followup.send(
        "‚úÖ –ë“Ø—Ö –≥–∏—à“Ø“Ø–¥—ç–¥ –æ–Ω–æ–æ –±–æ–ª–æ–Ω `4-1` —Ç“Ø–≤—à–∏–Ω –æ–Ω–æ–æ–ª–æ–æ.")

@bot.tree.command(name="set_tier", description="Admin: –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω tier-–≥ –≥–∞—Ä–∞–∞—Ä ”©”©—Ä—á–∏–ª–Ω”©")
@app_commands.describe(
    member="Tier ”©”©—Ä—á–ª”©—Ö —Ö—ç—Ä—ç–≥–ª—ç–≥—á",
    new_tier="–®–∏–Ω—ç tier (–∂–∏—à—ç—ç: 3-2, 4-1)"
)
async def set_tier(interaction: discord.Interaction, member: discord.Member, new_tier: str):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        print("‚ùå Interaction expired.")
        return
        
    # ‚úÖ –∑”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω —ç—Ä—Ö—Ç—ç–π —Ö—ç—Ä—ç–≥–ª—ç–≥—á –∞–∂–∏–ª–ª—É—É–ª–Ω–∞
    if not interaction.user.guild_permissions.administrator:
        await interaction.followup.send("‚ùå –≠–Ω—ç –∫–æ–º–∞–Ω–¥—ã–≥ –∑”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á –∞–∂–∏–ª–ª—É—É–ª–∂ —á–∞–¥–Ω–∞.", ephemeral=True)
        return

    if new_tier not in TIER_ORDER:
        await interaction.followup.send(
            f"‚ùå Tier: `{new_tier}` –æ–ª–¥—Å–æ–Ω–≥“Ø–π. –ó”©–≤—Ö”©–Ω –¥–∞—Ä–∞–∞—Ö –±–∞–π–¥–ª–∞–∞—Ä –±–∞–π–Ω–∞:\n{', '.join(TIER_ORDER)}",
            ephemeral=True
        )
        return

    user_id = str(member.id)
    scores = load_scores()
    if user_id not in scores:
        scores[user_id] = {"score": 0, "tier": new_tier}
    else:
        scores[user_id]["tier"] = new_tier

    save_scores(scores)

    # nickname —à–∏–Ω—ç—á–ª—ç—Ö
    try:
        base_nick = member.nick or member.name
        for prefix in TIER_ORDER:
            if base_nick.startswith(f"{prefix} |"):
                base_nick = base_nick[len(prefix)+2:].strip()
        new_nick = f"{new_tier} | {base_nick}"
        await member.edit(nick=new_nick)
    except discord.Forbidden:
        await interaction.followup.send(
            "‚ö†Ô∏è Tier –∞–º–∂–∏–ª—Ç—Ç–∞–π —Å–æ–ª–∏–≥–¥—Å–æ–Ω —á nickname ”©”©—Ä—á–∏–ª–∂ —á–∞–¥—Å–∞–Ω–≥“Ø–π (permission issue).",
            ephemeral=True
        )
        return
    except Exception as e:
        await interaction.followup.send(f"‚ö†Ô∏è –ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {e}", ephemeral=True)
        return

    await interaction.followup.send(f"‚úÖ {member.mention}-–∏–π–Ω tier-–≥ `{new_tier}` –±–æ–ª–≥–æ–ª–æ–æ.")

@bot.tree.command(name="user_score", description="–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –æ–Ω–æ–æ –±–æ–ª–æ–Ω —Ç“Ø–≤—à–∏–Ω–≥ —Ö–∞—Ä—É—É–ª–Ω–∞")
@app_commands.describe(member="–û–Ω–æ–æ–≥ —à–∞–ª–≥–∞—Ö —Ö—ç—Ä—ç–≥–ª—ç–≥—á")
async def user_score(interaction: discord.Interaction, member: discord.Member):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        print("‚ùå Interaction expired.")
        return

    scores = load_scores()
    user_id = str(member.id)
    data = scores.get(user_id)

    if isinstance(data, dict):
        score = data.get("score", 0)
        tier = data.get("tier", 4-1)
        await interaction.followup.send(
            f"üë§ {member.mention} —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –æ–Ω–æ–æ: {score}\nüéñ –¢“Ø–≤—à–∏–Ω: **{tier}**"
        )
    else:
        await interaction.followup.send(
            f"üë§ {member.mention} —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥ –æ–Ω–æ–æ –±“Ø—Ä—Ç–≥—ç–≥–¥—ç—ç–≥“Ø–π –±–∞–π–Ω–∞."
        )

@bot.tree.command(name="set_winner_team_fountain", description="Fountain –¥—ç—ç—Ä —Ö–æ–∂—Å–æ–Ω –±–∞ —Ö–æ–∂–∏–≥–¥—Å–æ–Ω –±–∞–≥—É—É–¥–∞–¥ –æ–Ω–æ–æ ”©–≥–Ω”©")
@app_commands.describe(
    winning_team="–•–æ–∂—Å–æ–Ω –±–∞–≥–∏–π–Ω –¥—É–≥–∞–∞—Ä (1, 2, 3...)",
    losing_team="–•–æ–∂–∏–≥–¥—Å–æ–Ω –±–∞–≥–∏–π–Ω –¥—É–≥–∞–∞—Ä (1, 2, 3...)"
)
async def set_winner_team_fountain(interaction: discord.Interaction, winning_team: int, losing_team: int):

    # ‚úÖ –≠—Ö–ª—ç—ç–¥ —ç—Ä—Ö —à–∞–ª–≥–∞–Ω–∞
    if interaction.user.id != TEAM_SETUP.get("initiator_id"):
        await interaction.response.send_message("‚ùå –ó”©–≤—Ö”©–Ω —Ç–æ—Ö–∏—Ä–≥–æ–æ —ç—Ö–ª“Ø“Ø–ª—Å—ç–Ω —Ö“Ø–Ω –∞–∂–∏–ª–ª—É—É–ª–∂ —á–∞–¥–Ω–∞.", ephemeral=True)
        return

    if not GAME_SESSION["active"]:
        await interaction.response.send_message("‚ö†Ô∏è Session –∏–¥—ç–≤—Ö–≥“Ø–π –±–∞–π–Ω–∞. /make_team_go-–æ–æ—Ä —ç—Ö–ª“Ø“Ø–ª.", ephemeral=True)
        return

    if winning_team < 1 or winning_team > TEAM_SETUP["team_count"] or losing_team < 1 or losing_team > TEAM_SETUP["team_count"]:
        await interaction.response.send_message("‚ùå –ë–∞–≥–∏–π–Ω –¥—É–≥–∞–∞—Ä –±—É—Ä—É—É –±–∞–π–Ω–∞.", ephemeral=True)
        return

    # ‚úÖ defer –∑”©–≤—Ö”©–Ω —ç–Ω–¥
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        print("‚ùå Interaction-–¥ –∞–ª—å —Ö—ç–¥–∏–π–Ω —Ö–∞—Ä–∏—É–ª—Å–∞–Ω –±–∞–π–Ω–∞.")
        return

    scores = load_scores()
    guild = interaction.guild
    team_size = TEAM_SETUP["players_per_team"]

    def get_team_user_ids(team_number: int):
        start_idx = (team_number - 1) * team_size
        end_idx = start_idx + team_size
        return TEAM_SETUP["player_ids"][start_idx:end_idx]

    winning_ids = get_team_user_ids(winning_team)
    losing_ids = get_team_user_ids(losing_team)
    changed_ids = []

    for uid in winning_ids:
        uid_str = str(uid)
        member = guild.get_member(uid)
        data = scores.get(uid_str, {})
        score = data.get("score", 0) + 2
        tier = data.get("tier", 4-1)

        while score >= 5:
            tier = promote_tier(tier)
            score -= 5

        scores[uid_str] = {
            "username": member.name if member else "unknown",
            "score": score,
            "tier": tier,
            "updated_at": datetime.now(timezone.utc).isoformat()
        }
        log_score_transaction(uid_str, +2, score, tier, "fountain win")
        changed_ids.append(uid)

    for uid in losing_ids:
        uid_str = str(uid)
        member = guild.get_member(uid)
        data = scores.get(uid_str, {})
        score = data.get("score", 0) - 2
        tier = data.get("tier", 4-1)

        while score <= -5:
            tier = demote_tier(tier)
            score += 5

        scores[uid_str] = {
            "username": member.name if member else "unknown",
            "score": score,
            "tier": tier,
            "updated_at": datetime.now(timezone.utc).isoformat()
        }
        log_score_transaction(uid_str, -2, score, tier, "fountain loss")
        changed_ids.append(uid)

    save_scores(scores)
    await update_nicknames_for_users(guild, changed_ids)

    win_mentions = ", ".join([f"<@{uid}>" for uid in winning_ids])
    lose_mentions = ", ".join([f"<@{uid}>" for uid in losing_ids])

    log_entry = {
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "mode": "fountain",
        "teams": TEAM_SETUP.get("teams", []),
        "winner_team": winning_team,
        "loser_team": losing_team,
        "changed_players": TEAM_SETUP.get("changed_players", []),
        "initiator": interaction.user.id
    }

    try:
        with open(LOG_FILE, "r") as f:
            log = json.load(f)
    except FileNotFoundError:
        log = []

    log.append(log_entry)
    with open(LOG_FILE, "w") as f:
        json.dump(log, f, indent=2)
    commit_to_github(LOG_FILE, "update match_log.json")

    last_entry = {
        "timestamp": log_entry["timestamp"],
        "mode": "fountain",
        "winners": winning_ids,
        "losers": losing_ids
    }
    with open(LAST_FILE, "w") as f:
        json.dump(last_entry, f, indent=2)

    await interaction.followup.send(
        f"üåä **Fountain –æ–Ω–æ–æ ”©–≥–ª”©”©!**\n"
        f"üèÜ –•–æ–∂—Å–æ–Ω –±–∞–≥ (Team {winning_team}): {win_mentions} ‚Üí **+2**\n"
        f"üíî –•–æ–∂–∏–≥–¥—Å–æ–Ω –±–∞–≥ (Team {losing_team}): {lose_mentions} ‚Üí **‚Äì2**"
    )


@bot.tree.command(name="active_teams", description="–ò–¥—ç–≤—Ö—Ç—ç–π –±–∞–≥—É—É–¥—ã–Ω –∂–∞–≥—Å–∞–∞–ª—Ç")
async def active_teams(interaction: discord.Interaction):
    # ‚úÖ —ç—Ö–ª—ç—ç–¥ session —à–∞–ª–≥–∞–Ω–∞
    if not GAME_SESSION["active"] or "teams" not in TEAM_SETUP:
        await interaction.response.send_message("‚ö†Ô∏è Session –∏–¥—ç–≤—Ö–≥“Ø–π –±–∞–π–Ω–∞.", ephemeral=True)
        return

    # ‚úÖ defer –∑”©–≤ –≥–∞–∑–∞—Ä—Ç
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        print("‚ùå Interaction-–¥ –∞–ª—å —Ö—ç–¥–∏–π–Ω —Ö–∞—Ä–∏—É–ª—Å–∞–Ω –±–∞–π–Ω–∞.")
        return

    guild = interaction.guild
    msg = "üìã **–ò–¥—ç–≤—Ö—Ç—ç–π –±–∞–≥—É—É–¥—ã–Ω –∂–∞–≥—Å–∞–∞–ª—Ç:**\n"

    for i, team_members in enumerate(TEAM_SETUP["teams"], start=1):
        mentions = []
        for uid in team_members:
            member = guild.get_member(uid)
            mentions.append(member.mention if member else f"<@{uid}>")
        msg += f"\nü•á **Team {i}:**\n‚Ä¢ " + ", ".join(mentions) + "\n"

    await interaction.followup.send(msg)

@bot.tree.command(name="set_team", description="–ê–¥–º–∏–Ω: —Ç–æ–≥–ª–æ–≥—á–¥—ã–≥ –±–∞–≥—Ç –±“Ø—Ä—Ç–≥—ç–Ω—ç")
@app_commands.describe(
    team_number="–ë–∞–≥–∏–π–Ω –¥—É–≥–∞–∞—Ä",
    mentions="–ë–∞–≥–∏–π–Ω –≥–∏—à“Ø“Ø–¥–∏–π–Ω mention-—É—É–¥ (@user @user...)"
)
async def set_team(interaction: discord.Interaction, team_number: int, mentions: str):
    # ‚úÖ –ê–¥–º–∏–Ω —ç—Ä—Ö–∏–π–≥ —ç—Ö–ª—ç—ç–¥ —à–∞–ª–≥–∞–Ω–∞
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚õîÔ∏è –ó”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω —Ö—ç—Ä—ç–≥–ª—ç–Ω—ç.", ephemeral=True)
        return

    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        print("‚ùå Interaction-–¥ –∞–ª—å —Ö—ç–¥–∏–π–Ω —Ö–∞—Ä–∏—É–ª—Å–∞–Ω –±–∞–π–Ω–∞.")
        return

    user_ids = [
        int(word[2:-1].replace("!", "")) for word in mentions.split()
        if word.startswith("<@") and word.endswith(">")
    ]

    if not user_ids:
        await interaction.followup.send("‚ö†Ô∏è –•–∞–º–≥–∏–π–Ω –±–∞–≥–∞–¥–∞–∞ –Ω—ç–≥ —Ç–æ–≥–ª–æ–≥—á mention —Ö–∏–π–Ω—ç “Ø“Ø.", ephemeral=True)
        return

    if not GAME_SESSION["active"]:
        GAME_SESSION["active"] = True
        now = datetime.now(timezone.utc)
        GAME_SESSION["start_time"] = now
        GAME_SESSION["last_win_time"] = now
        TEAM_SETUP["initiator_id"] = interaction.user.id
        TEAM_SETUP["player_ids"] = []
        TEAM_SETUP["team_count"] = 0
        TEAM_SETUP["players_per_team"] = 0
        TEAM_SETUP["teams"] = []

    already_in = [uid for uid in user_ids if uid in TEAM_SETUP["player_ids"]]
    if already_in:
        duplicates = ", ".join(f"<@{uid}>" for uid in already_in)
        await interaction.followup.send(f"‚ö†Ô∏è –î–∞—Ä–∞–∞—Ö –≥–∏—à“Ø“Ø–¥ –∞–ª—å —Ö—ç–¥–∏–π–Ω –±“Ø—Ä—Ç–≥—ç–≥–¥—Å—ç–Ω –±–∞–π–Ω–∞: {duplicates}", ephemeral=True)
        return

    TEAM_SETUP["team_count"] = max(TEAM_SETUP["team_count"], team_number)
    TEAM_SETUP["players_per_team"] = max(TEAM_SETUP["players_per_team"], len(user_ids))
    TEAM_SETUP["player_ids"].extend(user_ids)

    while len(TEAM_SETUP["teams"]) < team_number:
        TEAM_SETUP["teams"].append([])

    TEAM_SETUP["teams"][team_number - 1].extend(user_ids)

    # üóÉÔ∏è Log –±–∏—á–Ω—ç
    team_log_entry = {
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "mode": "set_team",
        "team_number": team_number,
        "players": user_ids,
        "initiator": interaction.user.id
    }

    try:
        with open("team_log.json", "r") as f:
            team_log = json.load(f)
    except FileNotFoundError:
        team_log = []

    team_log.append(team_log_entry)
    with open("team_log.json", "w") as f:
        json.dump(team_log, f, indent=2)

    mentions_str = ", ".join([f"<@{uid}>" for uid in user_ids])
    await interaction.followup.send(f"‚úÖ **Team {team_number}** –±“Ø—Ä—Ç–≥—ç–≥–¥–ª—ç—ç:\n‚Ä¢ {mentions_str}")

@bot.tree.command(name="add_team", description="–®–∏–Ω—ç –±–∞–≥–∏–π–≥ —Ç–æ–≥–ª–æ–∂ –±—É–π session-–¥ –Ω—ç–º–Ω—ç")
@app_commands.describe(
    mentions="–®–∏–Ω—ç –±–∞–≥–∏–π–Ω –≥–∏—à“Ø“Ø–¥–∏–π–Ω mention-—É—É–¥"
)
async def add_team(interaction: discord.Interaction, mentions: str):
    # ‚úÖ –≠—Ö–ª—ç—ç–¥ —ç—Ä—Ö —à–∞–ª–≥–∞—Ö
    if interaction.user.id != TEAM_SETUP.get("initiator_id"):
        await interaction.response.send_message("‚ùå –ó”©–≤—Ö”©–Ω –±–∞–≥–∏–π–Ω —Ç–æ—Ö–∏—Ä–≥–æ–æ–≥ —ç—Ö–ª“Ø“Ø–ª—Å—ç–Ω —Ö“Ø–Ω —ç–Ω—ç –∫–æ–º–∞–Ω–¥—ã–≥ –∞—à–∏–≥–ª–∞—Ö —ç—Ä—Ö—Ç—ç–π.", ephemeral=True)
        return

    if not GAME_SESSION["active"]:
        await interaction.response.send_message("‚ö†Ô∏è Session –∏–¥—ç–≤—Ö–≥“Ø–π –±–∞–π–Ω–∞. /make_team_go-–æ–æ—Ä —ç—Ö–ª“Ø“Ø–ª–Ω—ç “Ø“Ø.", ephemeral=True)
        return

    # ‚úÖ –î–∞—Ä–∞–∞ –Ω—å defer
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        print("‚ùå Interaction-–¥ –∞–ª—å —Ö—ç–¥–∏–π–Ω —Ö–∞—Ä–∏—É–ª—Å–∞–Ω –±–∞–π–Ω–∞.")
        return

    user_ids = [word[2:-1].replace("!", "") for word in mentions.split() if word.startswith("<@") and word.endswith(">")]
    if len(user_ids) != TEAM_SETUP["players_per_team"]:
        await interaction.followup.send(
            f"‚ö†Ô∏è –®–∏–Ω—ç—ç—Ä –±–∞–≥—Ç –±“Ø—Ä—Ç–≥—ç—Ö –≥–∏—à“Ø“Ø–¥–∏–π–Ω —Ç–æ–æ {TEAM_SETUP['players_per_team']}-—Ç—ç–π —è–≥ —Ç—ç–Ω—Ü“Ø“Ø –±–∞–π—Ö —ë—Å—Ç–æ–π.")
        return

    already_in = [uid for uid in user_ids if int(uid) in TEAM_SETUP["player_ids"]]
    if already_in:
        mention_list = ", ".join([f"<@{uid}>" for uid in already_in])
        await interaction.followup.send(f"‚ö†Ô∏è –î–∞—Ä–∞–∞—Ö —Ç–æ–≥–ª–æ–≥—á–∏–¥ –∞–ª—å —Ö—ç–¥–∏–π–Ω –±–∞–≥—Ç –±“Ø—Ä—Ç–≥—ç–≥–¥—Å—ç–Ω –±–∞–π–Ω–∞: {mention_list}")
        return

    TEAM_SETUP["player_ids"].extend([int(uid) for uid in user_ids])
    TEAM_SETUP["team_count"] += 1

    # ‚ûï teams-–¥ –Ω—ç–º—ç—Ö
    TEAM_SETUP["teams"].append([int(uid) for uid in user_ids])

    mentions_text = ", ".join([f"<@{uid}>" for uid in user_ids])
    await interaction.followup.send(
        f"‚ûï **–®–∏–Ω—ç –±–∞–≥ –Ω—ç–º—ç–≥–¥–ª—ç—ç (Team {TEAM_SETUP['team_count']})**:\n‚Ä¢ {mentions_text}"
    )

@bot.tree.command(name="add_donator", description="–ê–¥–º–∏–Ω: —Ç–æ–≥–ª–æ–≥—á–∏–π–≥ donator –±–æ–ª–≥–æ–Ω–æ")
@app_commands.describe(
    member="Donator –±–æ–ª–≥–æ—Ö —Ö—ç—Ä—ç–≥–ª—ç–≥—á",
    mnt="–•–∞–Ω–¥–∏–≤–ª–∞—Å–∞–Ω –º”©–Ω–≥”© (‚ÇÆ)"
)
async def add_donator(interaction: discord.Interaction, member: discord.Member, mnt: int):
    # ‚úÖ –≠—Ö–ª—ç—ç–¥ –∞–¥–º–∏–Ω —à–∞–ª–≥–∞–Ω–∞
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –≠–Ω—ç –∫–æ–º–∞–Ω–¥—ã–≥ –∑”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á –∞–∂–∏–ª–ª—É—É–ª–∂ —á–∞–¥–Ω–∞.", ephemeral=True)
        return

    # ‚úÖ defer —Ö–∏–π–Ω—ç
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        print("‚ùå Interaction-–¥ –∞–ª—å —Ö—ç–¥–∏–π–Ω —Ö–∞—Ä–∏—É–ª—Å–∞–Ω –±–∞–π–Ω–∞.")
        return

    donors = load_donators()
    uid = str(member.id)
    now = datetime.now(timezone.utc).isoformat()

    if uid not in donors:
        donors[uid] = {
            "total_mnt": mnt,
            "last_donated": now
        }
    else:
        donors[uid]["total_mnt"] += mnt
        donors[uid]["last_donated"] = now

    save_donators(donors)

    scores = load_scores()
    tier = scores.get(uid, {}).get("tier", "4-1")
    base_nick = member.nick or member.name

    for prefix in TIER_ORDER:
        if base_nick.startswith(f"{prefix} |"):
            base_nick = base_nick[len(prefix) + 2:].strip()
    for icon in ["üí∞", "üí∏", "üëë"]:
        if base_nick.startswith(f"{icon} "):
            base_nick = base_nick[len(icon) + 1:].strip()

    # üéñ emoji logic
    total_mnt = donors[uid]["total_mnt"]
    if total_mnt >= 30000:
        emoji = "üëë"
    elif total_mnt >= 10000:
        emoji = "üí∏"
    else:
        emoji = "üí∞"

    new_nick = f"{emoji} {tier} | {base_nick}"

    try:
        await member.edit(nick=new_nick)
    except discord.Forbidden:
        await interaction.followup.send("‚ö†Ô∏è Donator –±–æ–ª–≥–æ—Å–æ–Ω —á nickname ”©”©—Ä—á–∏–ª–∂ —á–∞–¥—Å–∞–Ω–≥“Ø–π (permission issue).", ephemeral=True)
        return

    await interaction.followup.send(
        f"{emoji} {member.mention} —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–≥ Donator –±–æ–ª–≥–æ–ª–æ–æ! (–Ω–∏–π—Ç {total_mnt:,}‚ÇÆ)"
    )

@bot.tree.command(name="donator_list", description="Donator —Ö—ç—Ä—ç–≥–ª—ç–≥—á–¥–∏–π–Ω –∂–∞–≥—Å–∞–∞–ª—Ç")
async def donator_list(interaction: discord.Interaction):
    # ‚úÖ –≠—Ö–ª—ç—ç–¥ admin —à–∞–ª–≥–∞–Ω–∞
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message(
            "‚ùå –≠–Ω—ç –∫–æ–º–∞–Ω–¥—ã–≥ –∑”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á –∞—à–∏–≥–ª–∞–∂ –±–æ–ª–Ω–æ.",
            ephemeral=True
        )
        return

    # ‚úÖ –¥–∞—Ä–∞–∞ –Ω—å interaction-–≥ defer —Ö–∏–π–Ω—ç
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        print("‚ùå Interaction-–¥ –∞–ª—å —Ö—ç–¥–∏–π–Ω —Ö–∞—Ä–∏—É–ª—Å–∞–Ω –±–∞–π–Ω–∞.")
        return

    donors = load_donators()
    if not donors:
        await interaction.followup.send("üì≠ Donator –±“Ø—Ä—Ç–≥—ç–ª –∞–ª–≥–∞ –±–∞–π–Ω–∞.")
        return

    scores = load_scores()
    msg = "üíñ **Donators:**\n"
    sorted_donors = sorted(donors.items(), key=lambda x: x[1].get("total_mnt", 0), reverse=True)

    for uid, data in sorted_donors:
        member = interaction.guild.get_member(int(uid))
        if member:
            emoji = get_donator_emoji(data)
            total = data.get("total_mnt", 0)
            tier = scores.get(uid, {}).get("tier", "4-1")

            display_name = member.display_name
            for prefix in TIER_ORDER:
                if display_name.startswith(f"{prefix} |"):
                    display_name = display_name[len(prefix) + 2:].strip()
                    break

            display = f"{emoji} {tier} | {display_name}" if emoji else f"{tier} | {display_name}"
            msg += f"{display} ‚Äî {total:,}‚ÇÆ\n"


    await interaction.followup.send(msg)

@bot.tree.command(name="all_commands", description="–ë–æ—Ç–æ–¥ –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π –±“Ø—Ö / –∫–æ–º–∞–Ω–¥—É—É–¥—ã–≥ —Ö–∞—Ä—É—É–ª–Ω–∞")
async def all_commands(interaction: discord.Interaction):
    # ‚úÖ –ê–¥–º–∏–Ω —ç—Ä—Ö —à–∞–ª–≥–∞–Ω–∞
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message(
            "‚ùå –≠–Ω—ç –∫–æ–º–∞–Ω–¥—ã–≥ –∑”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á –∞–∂–∏–ª–ª—É—É–ª–∂ —á–∞–¥–Ω–∞.",
            ephemeral=True
        )
        return

    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        print("‚ùå Interaction-–¥ –∞–ª—å —Ö—ç–¥–∏–π–Ω —Ö–∞—Ä–∏—É–ª—Å–∞–Ω –±–∞–π–Ω–∞.")
        return

    commands = await bot.tree.fetch_commands(guild=interaction.guild)

    if not commands:
        await interaction.followup.send("üì≠ –ö–æ–º–∞–Ω–¥ –±“Ø—Ä—Ç–≥—ç–≥–¥—ç—ç–≥“Ø–π –±–∞–π–Ω–∞.")
        return

    msg = "üìã **–ë–æ—Ç–æ–¥ –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π –∫–æ–º–∞–Ω–¥—É—É–¥:**\n"
    for cmd in commands:
        msg += f"‚Ä¢ `/{cmd.name}` ‚Äî {cmd.description or 'No description'}\n"

    await interaction.followup.send(msg)

@bot.tree.command(name="add_score", description="–•—ç—Ä—ç–≥–ª—ç–≥—á–¥–∏–π–Ω –æ–Ω–æ–æ–≥ –Ω—ç–º—ç–≥–¥“Ø“Ø–ª–Ω—ç")
@app_commands.describe(
    mentions="–•—ç—Ä—ç–≥–ª—ç–≥—á–¥–∏–π–≥ mention —Ö–∏–π–Ω—ç (@name @name...)",
    points="–ù—ç–º—ç—Ö –æ–Ω–æ–æ (—ç—Å–≤—ç–ª —Ö–∞—Å–∞—Ö, default: 1)"
)
async def add_score(interaction: discord.Interaction, mentions: str, points: int = 1):
    # ‚úÖ –≠—Ö–ª—ç—ç–¥ —ç—Ä—Ö —à–∞–ª–≥–∞–Ω–∞
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message(
            "‚ùå –≠–Ω—ç –∫–æ–º–∞–Ω–¥—ã–≥ –∑”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á –∞–∂–∏–ª–ª—É—É–ª–∂ —á–∞–¥–Ω–∞.",
            ephemeral=True
        )
        return

    # ‚úÖ –î–∞—Ä–∞–∞ –Ω—å defer
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        print("‚ùå Interaction –∞–ª—å —Ö—ç–¥–∏–π–Ω —Ö–∞—Ä–∏—É–ª—Å–∞–Ω –±–∞–π–Ω–∞.")
        return

    user_ids = [word[2:-1].replace("!", "") for word in mentions.split() if word.startswith("<@") and word.endswith(">")]

    if not user_ids:
        await interaction.followup.send("‚ö†Ô∏è –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω mention –æ—Ä—É—É–ª–Ω–∞ —É—É.")
        return

    scores = load_scores()
    updated = []
    failed = []

    for uid_str in user_ids:
        try:
            member = await interaction.guild.fetch_member(int(uid_str))
        except Exception as e:
            print(f"‚ùå {uid_str} fetch –∞–ª–¥–∞–∞: {e}")
            failed.append(uid_str)
            continue

        data = scores.get(uid_str, {})
        old_score = data.get("score", 0)
        old_tier = data.get("tier", 4-1)
        score = old_score + points
        tier = old_tier

        while score >= 5:
            tier = promote_tier(tier)
            score -= 5
        while score <= -5:
            tier = demote_tier(tier)
            score += 5

        scores[uid_str] = {
            "username": member.name,
            "score": score,
            "tier": tier,
            "updated_at": datetime.now(timezone.utc).isoformat()
        }

        log_score_transaction(uid_str, points, score, tier, "manual")
        updated.append(member)

    save_scores(scores)
    await update_nicknames_for_users(interaction.guild, [int(uid) for uid in user_ids])

    success_mentions = ", ".join([m.mention for m in updated])
    fail_mentions = ", ".join([f"<@{uid}>" for uid in failed])

    msg = f"‚úÖ –û–Ω–æ–æ `{points}`-–æ–æ—Ä —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç: {success_mentions}" if updated else ""
    if failed:
        msg += f"\n‚ö†Ô∏è Fetch —Ö–∏–π—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä—Å–∞–Ω: {fail_mentions}"

    await interaction.followup.send(msg or "‚ö†Ô∏è –û–Ω–æ–æ —à–∏–Ω—ç—á–∏–ª—Å—ç–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π.")

@bot.tree.command(name="resync", description="Slash –∫–æ–º–∞–Ω–¥—É—É–¥—ã–≥ –¥–∞—Ö–∏–Ω —Å–µ—Ä–≤–µ—Ä—Ç—ç–π sync —Ö–∏–π–Ω—ç (–∑”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω–¥)")
async def resync(interaction: discord.Interaction):
    # ‚úÖ –ê–¥–º–∏–Ω —à–∞–ª–≥–∞–Ω–∞
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚õîÔ∏è –ó”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω –ª –∞—à–∏–≥–ª–∞–Ω–∞.", ephemeral=True)
        return

    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        print("‚ùå Interaction-–¥ –∞–ª—å —Ö—ç–¥–∏–π–Ω —Ö–∞—Ä–∏—É–ª—Å–∞–Ω –±–∞–π–Ω–∞.")
        return

    guild = interaction.guild
    if not guild:
        await interaction.followup.send("‚ö†Ô∏è –≠–Ω—ç –∫–æ–º–∞–Ω–¥—ã–≥ –∑”©–≤—Ö”©–Ω —Å–µ—Ä–≤–µ—Ä –¥—ç—ç—Ä –∞–∂–∏–ª–ª—É—É–ª–Ω–∞ —É—É.", ephemeral=True)
        return

    # üîÑ –ö–æ–º–∞–Ω–¥—É—É–¥—ã–≥ –¥–∞—Ö–∏–Ω sync —Ö–∏–π–Ω—ç
    try:
        bot.tree.clear_commands(guild=guild)
        bot.tree.copy_global_to(guild=guild)
        await bot.tree.sync(guild=guild)
        await interaction.followup.send(f"‚úÖ –ö–æ–º–∞–Ω–¥—É—É–¥ `{guild.name}` —Å–µ—Ä–≤–µ—Ä –¥—ç—ç—Ä –¥–∞—Ö–∏–Ω sync —Ö–∏–π–≥–¥–ª—ç—ç.")
    except Exception as e:
        await interaction.followup.send(f"‚ö†Ô∏è Sync —Ö–∏–π—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {e}", ephemeral=True)

@bot.tree.command(name="backup_now", description="–î–∞—Ç–∞–≥ GitHub —Ä—É—É –≥–∞—Ä–∞–∞—Ä —Ö–∞–¥–≥–∞–ª–Ω–∞ (–∑”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω–¥).")
async def backup_now(interaction: discord.Interaction):
    # ‚ö†Ô∏è –≠—Ö–ª—ç—ç–¥ —ç—Ä—Ö —à–∞–ª–≥–∞–Ω–∞
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚õîÔ∏è –ó”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω –ª –∞—à–∏–≥–ª–∞–Ω–∞.", ephemeral=True)
        return

    # ‚úÖ –î–∞—Ä–∞–∞ –Ω—å interaction acknowledge —Ö–∏–π–Ω—ç
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        print("‚ùå Interaction –∞–ª—å —Ö—ç–¥–∏–π–Ω —Ö–∞—Ä–∏—É–ª—Å–∞–Ω –±–∞–π–Ω–∞.")
        return

    try:
        # üì¶ GitHub commit-—É—É–¥
        commit_to_github(SCORE_FILE, "manual backup: scores.json")
        commit_to_github(SCORE_LOG_FILE, "manual backup: score_log.jsonl")
        commit_to_github(LOG_FILE, "manual backup: match_log.json")
        commit_to_github(DONATOR_FILE, "manual backup: donator.json")
        commit_to_github(SHIELD_FILE, "manual backup: donate_shields.json")
        await interaction.followup.send("‚úÖ –î–∞—Ç–∞–≥ GitHub —Ä—É—É –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∞–¥–≥–∞–ª–ª–∞–∞.")
    except Exception as e:
        await interaction.followup.send(f"‚ùå Backup —Ö–∏–π—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {e}", ephemeral=True)

# ‚úÖ –ë–æ—Ç –∞—Å–∞—Ö–∞–¥ –∞–∂–∏–ª–ª–∞—Ö “Ø–π–ª–¥–ª“Ø“Ø–¥
@bot.event
async def on_ready():
    print(f"ü§ñ Bot logged in as {bot.user}")
    print("üìÅ Working directory:", os.getcwd())

    for guild in bot.guilds:
        bot.tree.copy_global_to(guild=guild)
        await bot.tree.sync(guild=guild)
        print(f"‚úÖ Synced commands for guild: {guild.name} ({guild.id})")

    # üïì Session timeout –±–æ–ª–æ–Ω GitHub commit task-—É—É–¥—ã–≥ —ç—Ö–ª“Ø“Ø–ª–Ω—ç
    asyncio.create_task(session_timeout_checker())
    asyncio.create_task(github_auto_commit())

# ‚úÖ –•—ç—Ä—ç–≥–ª—ç–≥—á —á–∞—Ç –±–∏—á–∏—Ö –±“Ø—Ä—Ç —Å“Ø“Ø–ª–∏–π–Ω message timestamp —Ö–∞–¥–≥–∞–ª–∞—Ö
@bot.event
async def on_message(message):
    if message.author.bot:
        return

    user_id = str(message.author.id)
    now = datetime.now(timezone.utc).isoformat()

    try:
        with open("last_message.json", "r") as f:
            last_seen = json.load(f)
    except FileNotFoundError:
        last_seen = {}

    last_seen[user_id] = now

    with open("last_message.json", "w") as f:
        json.dump(last_seen, f, indent=4)

    await bot.process_commands(message)

if __name__ == "__main__":
    print("Starting bot...")
    TOKEN = os.environ["TOKEN"]
    bot.run(TOKEN)
